// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: experimental.proto

package experimental

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExperimentalService_Ping_FullMethodName                = "/experimental.ExperimentalService/Ping"
	ExperimentalService_ClientStream_FullMethodName        = "/experimental.ExperimentalService/ClientStream"
	ExperimentalService_ServerStream_FullMethodName        = "/experimental.ExperimentalService/ServerStream"
	ExperimentalService_BidirectionalStream_FullMethodName = "/experimental.ExperimentalService/BidirectionalStream"
)

// ExperimentalServiceClient is the client API for ExperimentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperimentalServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (ExperimentalService_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ExperimentalService_ServerStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ExperimentalService_BidirectionalStreamClient, error)
}

type experimentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentalServiceClient(cc grpc.ClientConnInterface) ExperimentalServiceClient {
	return &experimentalServiceClient{cc}
}

func (c *experimentalServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ExperimentalService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentalServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (ExperimentalService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExperimentalService_ServiceDesc.Streams[0], ExperimentalService_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &experimentalServiceClientStreamClient{stream}
	return x, nil
}

type ExperimentalService_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type experimentalServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *experimentalServiceClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *experimentalServiceClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *experimentalServiceClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ExperimentalService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExperimentalService_ServiceDesc.Streams[1], ExperimentalService_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &experimentalServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExperimentalService_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type experimentalServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *experimentalServiceServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *experimentalServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ExperimentalService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExperimentalService_ServiceDesc.Streams[2], ExperimentalService_BidirectionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &experimentalServiceBidirectionalStreamClient{stream}
	return x, nil
}

type ExperimentalService_BidirectionalStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type experimentalServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *experimentalServiceBidirectionalStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *experimentalServiceBidirectionalStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExperimentalServiceServer is the server API for ExperimentalService service.
// All implementations must embed UnimplementedExperimentalServiceServer
// for forward compatibility
type ExperimentalServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	ClientStream(ExperimentalService_ClientStreamServer) error
	ServerStream(*Request, ExperimentalService_ServerStreamServer) error
	BidirectionalStream(ExperimentalService_BidirectionalStreamServer) error
	mustEmbedUnimplementedExperimentalServiceServer()
}

// UnimplementedExperimentalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperimentalServiceServer struct {
}

func (UnimplementedExperimentalServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExperimentalServiceServer) ClientStream(ExperimentalService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedExperimentalServiceServer) ServerStream(*Request, ExperimentalService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedExperimentalServiceServer) BidirectionalStream(ExperimentalService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedExperimentalServiceServer) mustEmbedUnimplementedExperimentalServiceServer() {}

// UnsafeExperimentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentalServiceServer will
// result in compilation errors.
type UnsafeExperimentalServiceServer interface {
	mustEmbedUnimplementedExperimentalServiceServer()
}

func RegisterExperimentalServiceServer(s grpc.ServiceRegistrar, srv ExperimentalServiceServer) {
	s.RegisterService(&ExperimentalService_ServiceDesc, srv)
}

func _ExperimentalService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentalServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperimentalService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentalServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentalService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExperimentalServiceServer).ClientStream(&experimentalServiceClientStreamServer{stream})
}

type ExperimentalService_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type experimentalServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *experimentalServiceClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *experimentalServiceClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExperimentalService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExperimentalServiceServer).ServerStream(m, &experimentalServiceServerStreamServer{stream})
}

type ExperimentalService_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type experimentalServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *experimentalServiceServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ExperimentalService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExperimentalServiceServer).BidirectionalStream(&experimentalServiceBidirectionalStreamServer{stream})
}

type ExperimentalService_BidirectionalStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type experimentalServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *experimentalServiceBidirectionalStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *experimentalServiceBidirectionalStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExperimentalService_ServiceDesc is the grpc.ServiceDesc for ExperimentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperimentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "experimental.ExperimentalService",
	HandlerType: (*ExperimentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ExperimentalService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _ExperimentalService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _ExperimentalService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _ExperimentalService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "experimental.proto",
}